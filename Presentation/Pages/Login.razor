@page "/login"

<link rel="stylesheet" href="/css/Login.css" />
@using Presentation.Auth
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="loginText">
            <h1>LOGIN TO BITTER</h1>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>

        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();
    private UserAccount? userAccount = new UserAccount();

    private async Task Authenticate()
    {
        userAccount = UserAccountService.GetUsers(model.UserName, model.Password);

        if (userAccount.UserName == null)
        {
            await js.InvokeVoidAsync("alert", "Incorrect UserName or Password");
            return;
        }
        else
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userAccount.UserName,
                    Role = userAccount.Role,
                });

            navManager.NavigateTo("/", true);
        }
    }
}
